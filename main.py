import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime, timedelta

API_TOKEN = '8017118025:AAHb_hxP6N0ffLELWMj0riXGIlpMAZ7erz4'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –±—Ä–æ–Ω—é–≤–∞–Ω—å
bookings = {}


# –°—Ç–∞–Ω–∏
class BookingState(StatesGroup):
    waiting_for_name = State()
    waiting_for_date = State()
    waiting_for_start_time = State()
    waiting_for_end_time = State()


# –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start
@dp.message(Command("start"))
async def start(message: types.Message):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –º—ñ—Å—Ü–µ üè†", callback_data="book")],
        [InlineKeyboardButton(text="–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä üìÖ", callback_data="calendar")]
    ])
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –í–∏–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=markup)


# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É "–ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –º—ñ—Å—Ü–µ"
@dp.callback_query(F.data == "book")
async def ask_name(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î —ñ–º'—è –¥–ª—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è:")
    await state.set_state(BookingState.waiting_for_name)


# –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ
@dp.message(BookingState.waiting_for_name)
async def ask_date(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=(datetime.today() + timedelta(days=i)).strftime("%d.%m.%Y"),
                              callback_data=f"book_date_{(datetime.today() + timedelta(days=i)).strftime('%Y-%m-%d')}")]
        for i in range(7)
    ])
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –¥–ª—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è:", reply_markup=markup)
    await state.set_state(BookingState.waiting_for_date)


# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –¥–∞—Ç–∏
@dp.callback_query(F.data.startswith('book_date'))
async def ask_start_time(callback_query: CallbackQuery, state: FSMContext):
    date = callback_query.data.split('_')[2]
    await state.update_data(date=date)
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{hour}:00", callback_data=f"start_time_{hour}:00")]
        for hour in range(8, 22)
    ])
    await callback_query.answer()
    await bot.send_message(callback_query.from_user.id, "–û–±–µ—Ä—ñ—Ç—å –ø–æ—á–∞—Ç–æ–∫ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è:", reply_markup=markup)
    await state.set_state(BookingState.waiting_for_start_time)


# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —á–∞—Å—É
@dp.callback_query(F.data.startswith('start_time'))
async def ask_end_time(callback_query: CallbackQuery, state: FSMContext):
    start_time = callback_query.data.split('_')[2]
    await state.update_data(start_time=start_time)
    start_hour = int(start_time.split(':')[0])
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"–î–æ {hour}:00", callback_data=f"end_time_{hour}:00")]
        for hour in range(start_hour + 1, 23)
    ])
    await callback_query.answer()
    await bot.send_message(callback_query.from_user.id, "–û–±–µ—Ä—ñ—Ç—å –∫—ñ–Ω–µ—Ü—å –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è:", reply_markup=markup)
    await state.set_state(BookingState.waiting_for_end_time)


# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∫—ñ–Ω—Ü–µ–≤–æ–≥–æ —á–∞—Å—É
@dp.callback_query(F.data.startswith('end_time'))
async def confirm_booking(callback_query: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    name = user_data.get("name", "–ù–µ–≤—ñ–¥–æ–º–∏–π")
    date = user_data.get("date", "–ù–µ–≤—ñ–¥–æ–º–∞ –¥–∞—Ç–∞")
    start_time = user_data.get("start_time", "–ù–µ–≤—ñ–¥–æ–º–æ")
    end_time = callback_query.data.split('_')[2]
    bookings[f"{name} ({date})"] = f"{start_time} - {end_time}"

    await callback_query.answer()
    await bot.send_message(callback_query.from_user.id,
                           f"–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ –¥–ª—è {name} –Ω–∞ {date} –∑ {start_time} –¥–æ {end_time}.")
    await state.clear()

    # –ü–æ–∫–∞–∑–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏ –≤–∏–±–æ—Ä—É –ø—ñ—Å–ª—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –º—ñ—Å—Ü–µ üè†", callback_data="book")],
        [InlineKeyboardButton(text="–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä üìÖ", callback_data="calendar")]
    ])
    await bot.send_message(callback_query.from_user.id, "–©–æ —Ö–æ—á–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ?", reply_markup=markup)


# –ü–µ—Ä–µ–≥–ª—è–¥ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
@dp.callback_query(F.data == "calendar")
async def view_calendar(callback_query: CallbackQuery):
    calendar = "\n".join([f"{name}: {time}" for name, time in bookings.items()]) if bookings else "–ù–µ–º–∞—î –±—Ä–æ–Ω—é–≤–∞–Ω—å."
    await callback_query.answer()
    await bot.send_message(callback_query.from_user.id, f"–û—Å—å –∫–∞–ª–µ–Ω–¥–∞—Ä –±—Ä–æ–Ω—é–≤–∞–Ω—å:\n{calendar}")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
